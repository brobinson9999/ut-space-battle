class RPGProjectileRenderable extends DrunkenProjectileRenderable;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

var Actor Trailer;
var Actor Trailer2;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function initialize() {
		super.initialize();
		
		setDrawscale(sqrt(projectile.damage) * 0.8);

		trailer = Spawn(class'RocketCorona', self);
		trailer.SetBase(self);

		trailer2 = Spawn(class'ONSAvrilSmokeTrail', self);
		trailer2.SetBase(self);
	}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function DestroyTrails()
{
	if (Trailer != None)
			Trailer.Destroy();
	if (Emitter(Trailer2) != None)
		Emitter(Trailer2).Kill();
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function Destroyed()
{
  DestroyTrails();
  Super.Destroyed();
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function ProcessTouch (Actor Other, vector HitLocation) {}
simulated function bool EffectIsRelevant(vector SpawnLocation, bool bForceDedicated ) { return true; }
simulated event TakeDamage( int Damage, Pawn EventInstigator, vector HitLocation, vector Momentum, class<DamageType> DamageType) {}
simulated singular event Touch(Actor Other) {}
simulated singular event HitWall(vector HitNormal, actor Wall) {}
simulated function bool CheckMaxEffectDistance(PlayerController P, vector SpawnLocation) { return true; }

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
  
  simulated function impact()
  {
		updateLocation();

		spawnScaledEffect(class'FX_FireballExplosion_Dense');

    super.impact();
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

defaultproperties
{
	DrunkenRateMin=10000
	DrunkenRateMax=20000
	DrunkenMagnitudeMin=10
	DrunkenMagnitudeMax=100

	AmbientSound=Sound'WeaponSounds.RocketLauncher.RocketLauncherProjectile'
	SoundVolume=255
	SoundRadius=100

	DrawType=DT_StaticMesh
	StaticMesh=StaticMesh'WeaponStaticMesh.RocketProj'
	DrawScale=1.0

	bUnlit=True
	AmbientGlow=96
	LightType=LT_Steady
	LightEffect=LE_QuadraticNonIncidence
	LightBrightness=255
	LightHue=28
	LightRadius=5
	bDynamicLight=true

//	bBounce=false
	bFixedRotationDir=True
	RotationRate=(Roll=50000)
	DesiredRotation=(Roll=30000)

//  CullDistance=0.0

	fireShakeMagnitude=100
	fireEffect=class'RocketMuzFlash3rd'
	fireSound=Sound'WeaponSounds.RocketLauncher.RocketLauncherFire'

	impactShakeMagnitude=200
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
