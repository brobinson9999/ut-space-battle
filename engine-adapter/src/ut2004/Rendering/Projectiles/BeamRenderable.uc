class BeamRenderable extends ProjectileRenderable;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  var BeamGraphic beamInstance;
  var Color beamColor;
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function notifyProjectileFired(actor renderableFiredFrom) {
    beamInstance = spawn(class'FX_ExperimentalBeam',,, renderableFiredFrom.location, rotator(projectile.endLocation - projectile.startLocation));
    beamInstance.setScale(sqrt(projectile.damage));
    beamInstance.setBase(renderableFiredFrom);
    beamInstance.setBeamColor(beamColor);
    
    super.notifyProjectileFired(renderableFiredFrom);
  }

  simulated function setBeamEnd(vector end) {
    beamInstance.setBeamEndPoint(end);
  }

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function impact() {
    local ScalableEmitter hitEffect;
    
    setBeamEnd(projectile.endLocation * getGlobalPositionScaleFactor());

    hitEffect = spawn(class'ShockBeamExplosion',,,projectile.endLocation * getGlobalPositionScaleFactor(), rotator(projectile.endLocation - projectile.startLocation));
    if (hitEffect != none && projectile != none)
      hitEffect.setScale(sqrt(projectile.damage));
    
    super.impact();
    
    destroy();
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function missed() {
    setBeamEnd(projectile.endLocation + ((projectile.endLocation - projectile.startLocation) * 10));
    
    destroy();
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

defaultproperties
{
  beamColor=(R=192,G=192,B=192)
}
