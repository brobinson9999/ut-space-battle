class MovementTrackingSkyZoneInfo extends BaseActor;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

	var SkyZoneInfo cachedSkyZoneInfo;
	var PlayerControllerAdapter cachedPCAdapter;
	
	var(MovementTracking) float movementOffsetFactor;
	var vector originalSkyzonePosition;
	
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

	simulated function vector getCameraPosition() {
		local PlayerControllerAdapter pcAdapter;
		
		if (cachedPCAdapter == none) {
			foreach DynamicActors(class'PlayerControllerAdapter', pcAdapter) {
				cachedPCAdapter = pcAdapter;
				break;
			}
		}
		
		return cachedPCAdapter.location;
	}
	
	simulated function vector getNewMovementOffset() {
		return getCameraPosition() * movementOffsetFactor;
	}
	
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

	simulated function SkyZoneInfo getSkyZoneInfo() {
		local SkyZoneInfo skyZoneInfo;
		
		if (cachedSkyZoneInfo == none) {
			foreach DynamicActors(class'SkyZoneInfo', skyZoneInfo) {
				cachedSkyZoneInfo = skyZoneInfo;
				originalSkyzonePosition = cachedSkyZoneInfo.location;
				break;
			}
		}
		
		return cachedSkyZoneInfo;
	}
	
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

	simulated function tick(float delta) {
		local SkyZoneInfo skyZoneInfo;
		local vector newMovementOffset;
		local vector newSkyZoneLocation;
		
		skyZoneInfo = getSkyZoneInfo();
		if (skyZoneInfo != none) {
			newMovementOffset = getNewMovementOffset();
			newSkyZoneLocation = originalSkyzonePosition + newMovementOffset;
			
			skyZoneInfo.setLocation(newSkyZoneLocation);
		}
		
		super.tick(delta);
	}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
