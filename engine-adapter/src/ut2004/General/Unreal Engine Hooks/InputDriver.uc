class InputDriver extends Interaction;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  var InputView View;
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function bool JoyEvent(EInputKey Axis, float Delta)
  {
    local EInputAction X;
    
    X = IST_Axis;
    
    return KeyEvent(Axis, X, Delta * 0.1);
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function bool KeyEvent( out EInputKey Key, out EInputAction Action, FLOAT Delta )
  {
    local name KeyName;
    local name ActionName;
    local bool bResult;

    if (View == None)
      bResult = false;
    else
    {
      KeyName = GetEnum(Enum'EInputKey', Key);
      ActionName = GetEnum(Enum'EInputAction', Action);
      bResult = View.KeyEvent(String(KeyName), String(ActionName), Delta);
    }
    
    // Don't override interface for these keys.
    if (Key == IK_LeftMouse || Key == IK_RightMouse || Key == IK_MouseX || Key == IK_MouseY)
      return false;
    
    return bResult;
  }

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function Cleanup()
  {
    View = None;
    
    Master.RemoveInteraction(Self);
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

defaultproperties
{
  bActive=true
}