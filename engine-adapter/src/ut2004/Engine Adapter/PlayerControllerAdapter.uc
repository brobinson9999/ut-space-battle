class PlayerControllerAdapter extends xPlayer;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  const JoyResolution = 0.1;
  const JoyDeadZone   = 0.2;

  var input float       JoyX, JoyY, JoyZ, JoyR, JoyU, JoyV, JS1, JS2;
  var float             oJoyX, oJoyY, oJoyZ, oJoyR, oJoyU, oJoyV, oJS1, oJS2;

  var InputView         InputView;

  var bool              bCallParentPlayerTick;
  
  var vector            CameraLocation;
  var rotator           CameraRotation;
  
  var Pawn              pawnAdapter;
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated event PlayerTick(float DeltaTime)
{
  // Deadzone.
  if (abs(JoyX) < JoyDeadZone) JoyX = 0;
  if (abs(JoyY) < JoyDeadZone) JoyY = 0;
  if (abs(JoyZ) < JoyDeadZone) JoyZ = 0;
  if (abs(JoyR) < JoyDeadZone) JoyR = 0;
  if (abs(JoyU) < JoyDeadZone) JoyU = 0;
  if (abs(JoyV) < JoyDeadZone) JoyV = 0;
  if (abs(JS1)  < JoyDeadZone) JS1  = 0;
  if (abs(JS2)  < JoyDeadZone) JS2  = 0;

  // Resolution Checks.
  if (abs(JoyX - oJoyX) > JoyResolution)
  {
    oJoyX = JoyX;
    KeyEvent("IK_JoyX", "IST_Axis", oJoyX);
  }
  
  if (abs(JoyY - oJoyY) > JoyResolution)
  {
    oJoyY = JoyY;
    KeyEvent("IK_JoyY", "IST_Axis", oJoyY);
  }
  
  if (abs(JoyZ - oJoyZ) > JoyResolution)
  {
    oJoyZ = JoyZ;
    KeyEvent("IK_JoyZ", "IST_Axis", oJoyZ);
  }
  
  if (abs(JoyR - oJoyR) > JoyResolution)
  {
    oJoyR = JoyR;
    KeyEvent("IK_JoyR", "IST_Axis", oJoyR);
  }
  
  if (abs(JoyU - oJoyU) > JoyResolution)
  {
    oJoyU = JoyU;
    KeyEvent("IK_JoyU", "IST_Axis", oJoyU);
  }
  
  if (abs(JoyV - oJoyV) > JoyResolution)
  {
    oJoyV = JoyV;
    KeyEvent("IK_JoyV", "IST_Axis", oJoyV);
  }
  
  if (abs(JS1 - oJS1) > JoyResolution)
  {
    oJS1 = JS1;
    KeyEvent("IK_JoySlider1", "IST_Axis", oJS1);
  }
  
  if (abs(JS2 - oJS2) > JoyResolution)
  {
    oJS2 = JS2;
    KeyEvent("IK_JoySlider2", "IST_Axis", oJS2);
  }
  
  if (bCallParentPlayerTick)
    Super.PlayerTick(DeltaTime);
}


// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

exec simulated function requestRespawnAdapter() {
  fire(0);
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function bool KeyEvent(string Key, string Action, float Delta)
{
  if (InputView == None) return false;
  
  return InputView.KeyEvent(Key, Action, Delta);
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function bool BeyondViewDistance(vector OtherLocation, float CullDistance)
{
  return false;
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated event Destroyed()
{
  // Cleanup.
  Cleanup();
  
  // Call Superclass.
  Super.Destroyed();
}

simulated function Cleanup()
{
  // Clear InputView.
  InputView = None;
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function SetCameraLocation(vector NewCameraLocation)
{
  CameraLocation = NewCameraLocation;
    
  SetLocation(CameraLocation);  
  if (Pawn != None)
    Pawn.SetLocation(CameraLocation);  
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function SetCameraRotation(rotator NewCameraRotation)
{
  CameraRotation = NewCameraRotation;
  
  SetRotation(CameraRotation);  
  if (Pawn != None)
    Pawn.SetRotation(CameraRotation);  
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

event playerCalcView(out actor viewActor, out vector cameraLocation, out rotator cameraRotation)
{
  viewActor = self;
  cameraLocation = self.cameraLocation;
  cameraRotation = self.cameraRotation;
}

  // Seems to be relevant to dying..
//simulated function ClientDying(class<DamageType> DamageType, vector HitLocation) {}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function playerKilled(PlayerController killer)
{
  if (PawnAdapter(pawn) != none)
    PawnAdapter(pawn).playerKilled(killer);
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

defaultproperties
{
  bCollideWorld=false
  PawnClass = class'PawnAdapter'
  
  bCallParentPlayerTick=false
}