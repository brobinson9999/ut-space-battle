class TransientParticleSystemRenderable extends ScalableEmitter;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

var ParticleSystem effectTemplate;
var ParticleSystemComponent effectInstance;

var float maxLifetime;
var float remainingLifetime;


// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function setTemplate(ParticleSystem newEffectTemplate) {
  effectTemplate = newEffectTemplate;
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function initializeTransientParticleSystemRenderable()
{
  if (WorldInfo.NetMode != NM_DedicatedServer && effectTemplate != none) {
    effectInstance = spawnParticleSystem(effectTemplate, location, rotation);
    effectInstance.onSystemFinished = myOnParticleSystemFinished;
    effectInstance.bUpdateComponentInTick = true;
    attachComponent(effectInstance);
  }
  
  remainingLifetime = maxLifetime;
}

simulated function ParticleSystemComponent getInstance() {
  return effectInstance;
}

simulated function tick(float delta) {
  super.tick(delta);
  
  if (effectInstance != none) {
    // translation will be scaled by drawScale internally, so counter-balance that here
    effectInstance.setTranslation(location / drawScale);
    effectInstance.setRotation(rotation);
  }
  
  if (remainingLifetime > 0) {
    remainingLifetime -= delta;
    if (remainingLifetime <= 0)
      clearAndDestroy();
  }
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function MyOnParticleSystemFinished(ParticleSystemComponent PSC)
{
  if (PSC == effectInstance)
    clearAndDestroy();
}

simulated function clearAndDestroy() {
  clearEffectInstance();
  destroy();
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function clearEffectInstance() {
    if (effectInstance != none) {
      effectInstance.deactivateSystem();
      detachComponent(effectInstance);
      worldInfo.myEmitterPool.onParticleSystemFinished(effectInstance);
      effectInstance = none;
    }
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function cleanup() {
    clearEffectInstance();

    super.cleanup();
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function ParticleSystemComponent spawnParticleSystem(ParticleSystem template, vector spawnLocation, rotator spawnRotation)
  {
    local ParticleSystemComponent instance;
    
    instance = worldInfo.myEmitterPool.spawnEmitter(template, spawnLocation, spawnRotation);
    
    return instance;
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated singular event Touch( Actor Other, PrimitiveComponent OtherComp, vector HitLocation, vector HitNormal ) {}
simulated singular event HitWall(vector HitNormal, actor Wall, PrimitiveComponent WallComp) {}
simulated function ProcessTouch(Actor Other, Vector HitLocation, Vector HitNormal) {}
simulated function bool EffectIsRelevant(vector SpawnLocation, bool bForceDedicated, optional float CullDistance) { return true; }

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

defaultproperties
{
  bCollideActors = false
  bCollideWorld = false
  bProjTarget = false

  bHidden=false
}
