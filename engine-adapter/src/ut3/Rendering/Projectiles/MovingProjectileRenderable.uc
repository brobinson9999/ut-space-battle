class MovingProjectileRenderable extends ProjectileRenderable;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  var float destructionTime;
  var vector tearOffVelocity;
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
  
  simulated function missed() {
    updateLocation();
    tearOffGameSim();
  }

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function tearOffGameSim()
  {
    if (projectile != none)
    {
      tearOffVelocity = projectile.getVelocity();
      destructionTime = game.getCurrentTime() + 5;
    } else if (destructionTime == 0)
    {
      destroy();
    }
    
    super.tearOffGameSim();
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function tick(float Delta)
  {
    super.tick(Delta);

    updateTornOffLocation(delta);

    if (destructionTime > 0 && (game == None || destructionTime <= game.getCurrentTime()))
      destroy();
  }

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function updateTornOffLocation(float delta)
  {
    local vector newLocation;
    
    newLocation = location;
    newLocation += (tearOffVelocity * delta);
    
    setLocation(newLocation);
  }  
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

defaultproperties
{
}
