class ParticleSystemProjectileRenderable extends DrunkenProjectileRenderable;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

var ParticleSystem          fireTemplate;
var SoundCue                fireSound;
var float                   fireEffectMaxLifetime;

var ParticleSystem          trailTemplate;
var ParticleSystemComponent trailInstance;

var ParticleSystem          explosionTemplate;
var SoundCue                explosionSound;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
  
  simulated function notifyProjectileFired(actor renderableFiredFrom)
  {
    setScale(getEffectScale() * getGlobalDrawscaleFactor());
    
    super.notifyProjectileFired(renderableFiredFrom);
    
    if (renderableFiredFrom == none) return;
    
    if (fireTemplate != none)
      spawnTransientEffect(fireTemplate, renderableFiredFrom.location, rotator(projectile.endLocation - projectile.startLocation), fireEffectMaxLifetime, drawScale, renderableFiredFrom);

    if (fireSound != none)
      renderableFiredFrom.playSound(fireSound);
  }
  
  simulated function float getEffectScale() {
    return sqrt(projectile.damage);
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function tick(float Delta)
  {
    if (WorldInfo.NetMode != NM_DedicatedServer && TrailTemplate != None && TrailInstance == None)
    {
      TrailInstance = WorldInfo.MyEmitterPool.SpawnEmitterCustomLifetime(TrailTemplate);
      TrailInstance.SetAbsolute(false, false, false);
      TrailInstance.SetLODLevel(WorldInfo.bDropDetail ? 1 : 0);
      TrailInstance.OnSystemFinished = MyOnParticleSystemFinished;
      TrailInstance.bUpdateComponentInTick = true;
      AttachComponent(TrailInstance);
    }

    super.tick(Delta);
  }

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function MyOnParticleSystemFinished(ParticleSystemComponent PSC)
{
  if (PSC == TrailInstance)
  {
    DetachComponent(TrailInstance);
    WorldInfo.MyEmitterPool.OnParticleSystemFinished(TrailInstance);
    TrailInstance = None;
  }
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function Destroyed()
{
  if (TrailInstance != None)
  {
    TrailInstance.DeactivateSystem();
    DetachComponent(TrailInstance);
    WorldInfo.MyEmitterPool.OnParticleSystemFinished(TrailInstance);
    TrailInstance = None;
  }
  
  Super.Destroyed();
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function impact()
  {
    updateLocation();

    if (explosionTemplate != none)
      spawnTransientEffect(explosionTemplate, location, rotation, 0, drawScale, none);
    
    if (ExplosionSound != None)
      playSound(explosionSound);

    super.impact();
    
    destroy();
  }

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

defaultproperties
{
  bHidden=false
}
