class SpaceWorker_CommandDecorator extends CompositeSpaceWorker;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  var private SpaceWorker decorated;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function setDecorated(CompositeSpaceWorker other)
  {
    decorated = other;
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function initializeWorker()
  {
    if (decorated != none)
      decorated.initializeWorker();

    super.initializeWorker();
  }

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function addWorker(SpaceWorker other)
  {
    if (decorated != none) decorated.addWorker(other);

    super.addWorker(other);
  }

  simulated function removeWorker(SpaceWorker other)
  {
    if (decorated != none) decorated.removeWorker(other);

    super.removeWorker(other);
  }

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function addTask(SpaceTask task)
  {
    if (decorated != none) decorated.addTask(task);
    
    super.addTask(task);
  }

  simulated function removeTask(SpaceTask task)
  {
    if (decorated != none) decorated.removeTask(task);
    
    super.removeTask(task);
  }

  // Decorated will take care of this - otherwise we get duplicates.
  simulated function addTaskToChildren(SpaceTask task) {}
  simulated function removeTaskFromChildren(SpaceTask task) {}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function completedTask(SpaceTask task)
  {
    if (decorated != none) decorated.completedTask(task);
    
    super.completedTask(task);
  }
  
  simulated function gaveUpTask(SpaceTask task)
  {
    if (decorated != none) decorated.gaveUpTask(task);
    
    super.gaveUpTask(task);
  }

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function updateWorker()
  {
    if (decorated != none) decorated.updateWorker();
    
    super.updateWorker();
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function array<PotentialTaskWorkerAssignment> getPotentialAssignments()
  {
    if (decorated != none) return decorated.getPotentialAssignments();
    
    return super.getPotentialAssignments();
  }

  simulated function evaluatePotentialAssignment(PotentialTaskWorkerAssignment assignment)
  {
    if (decorated != none) decorated.evaluatePotentialAssignment(assignment);
    
    super.evaluatePotentialAssignment(assignment);
  }
  
  simulated function notifyAllocation(PotentialTaskWorkerAssignment assignment)
  {
    if (decorated != none) decorated.notifyAllocation(assignment);
    
    super.notifyAllocation(assignment);
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function setTaskPreference(class<SpaceTask> Task_Class, object New_Target, float BiasWeight)
  {
    if (decorated != none) decorated.setTaskPreference(Task_Class, New_Target, BiasWeight);
    
    super.setTaskPreference(Task_Class, New_Target, BiasWeight);
  }

  simulated function Recieve_Assignment_To(SpaceTask Task)
  {
    if (decorated != none) decorated.Recieve_Assignment_To(Task);
    
    super.Recieve_Assignment_To(Task);
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function removeExpiredTasks()
  {
    if (decorated != none) decorated.removeExpiredTasks();
    
    super.removeExpiredTasks();
  }
  
  simulated function removeExpiredWorkers()
  {
    if (decorated != none) decorated.removeExpiredWorkers();
    
    super.removeExpiredWorkers();
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function cleanup()
  {
    if (decorated != none) decorated.cleanup();
    
    setDecorated(none);
    
    super.cleanup();
  }

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
  
defaultproperties
{
}