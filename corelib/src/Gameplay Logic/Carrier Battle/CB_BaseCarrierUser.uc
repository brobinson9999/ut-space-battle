class CB_BaseCarrierUser extends DFCB_BaseUser;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

var DFCB_TeamInfo team;

var Ship flagship;
var DFCB_PlayerInfo flagshipPlayer;
var ShipFactory flagshipFactory;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function initializeUser()
{
  super.initializeUser();

  // Setup Team and Pilots.
  team = DFCB_TeamInfo(allocateObject(class'DFCB_TeamInfo'));
  team.user = self;
  flagshipPlayer = DFCB_PlayerInfo(allocateObject(class'DFCB_PlayerInfo'));
  flagshipPlayer.bFlagship = true;
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function bool attemptRespawn()
{
  if (flagship == None || !flagshipPlayer.bAlive)
    return respawnFlagship();
  else
    return false;
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function bool respawnFlagship()
{
  local bool spawnResult;

  spawnResult = respawnPlayer(flagshipPlayer, none, vect(0,0,0), 100000);
  flagship = flagshipPlayer.ship;

  return spawnResult;
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function updateUser()
{
  local int i;

  super.updateUser();

  if (flagship != None)
  {
    for (i=0;i<team.players.length;i++)
    {
      if (!team.players[i].bAlive && getCurrentTime() >= team.players[i].NextSpawnTime)
        respawnPlayer(team.players[i], none, flagship.getShipLocation(), 25000);
    }
  }
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ***** Events and Notifications.

simulated function userLostShip(Ship Other)
{
  if (other == flagship)
    flagship = None;

  super.userLostShip(Other);
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function DFCB_PlayerInfo player_For_Ship(Ship Other)
{
  local int i;

  if (flagshipPlayer.ship == other)
    return flagshipPlayer;

  for (i=0;i<team.players.length;i++)
    if (team.players[i].ship == other)
      return team.players[i];

  return none;
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function array<Contact> getContactsForDesignation(string designation) {
  local int i;
  local array<Contact> result;

  if (designation ~= "flagship") {
    if (flagship != None) {
      myAssert(!flagship.bCleanedUp, "CB_BaseCarrierUser flagship != none but flagship.bCleanedUp");
      result[0] = contactWithShip(flagship);
      myAssert(result[0] != none, "CB_BaseCarrierUser flagship != none but it has no contact for that ship");
    }

    return result;
  }

  if (designation ~= "fighters" || designation ~= "reinforcements") {
    for (i=0;i<team.players.length;i++) {
      if (team.players[i].ship != none) {
        myAssert(!team.players[i].ship.bCleanedUp, "CB_BaseCarrierUser team.players[i].ship != none but team.players[i].ship.bCleanedUp");
        result[i] = contactWithShip(team.players[i].ship);
        myAssert(result[i] != none, "CB_BaseCarrierUser team.players[i].ship != none but it has no contact for that ship");
      }
    }

    return result;
  }

  // Return result.
  return super.getContactsForDesignation(designation);
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function cleanup()
{
  // super.cleanup() will remove ships, and the notifications that result from losing those ships will bubble back to the team and flagship
  // info. As a result, we want to clean those up after we have cleaned up everything else.
  super.cleanup();

  if (team != none) {
    team.cleanup();
    team = none;
  }

  if (flagshipPlayer != none) {
    flagshipPlayer.cleanup();
    flagshipPlayer = none;
  }

  flagship = none;
  flagshipFactory = none;
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

defaultproperties
{
}