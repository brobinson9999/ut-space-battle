class DFCB_BaseUser extends UTSB_BaseUser;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

var array<DFCB_SpawnOption> spawnOptions;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function DFCB_SpawnOption addSpawnOption(ShipFactory factory, float pointCost)
{
  local DFCB_SpawnOption result;

  result = DFCB_SpawnOption(allocateObject(class'DFCB_SpawnOption'));
  result.factory = factory;
  result.pointCost = pointCost;

  spawnOptions[spawnOptions.Length] = result;

  return result;
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function bool respawnPlayer(DFCB_PlayerInfo Player, Ship newCarrier, vector spawnLocation, float spawnRadius)
{
  local int i;
  local Ship NewShip;
  local Sector SpawnSector;
  local vector StartLocation;

  SpawnSector = SpaceGameSimulation(getGameSimulation()).getGlobalSector();

  for (i=0;i<spawnOptions.length;i++)
    if (Player.Points >= SpawnOptions[i].PointCost || i == (spawnOptions.length - 1))
    {
      ChangePlayerPoints(Player, -SpawnOptions[i].PointCost);
      if (NewCarrier != None)
        NewShip = SpaceGameSimulation(getGameSimulation()).createShip_Docked(self, NewCarrier, spawnOptions[i].factory);
      else
      {
        startLocation = spawnLocation + (vRand() * spawnRadius * fRand());
        NewShip = SpaceGameSimulation(getGameSimulation()).createShip_OpenSpace(self, SpawnSector, StartLocation, spawnOptions[i].factory);
      }

      respawnedPlayer(Player, NewShip);

      break;
    }

  Player.bAlive = true;
  Player.Ship = NewShip;

  return true;
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function respawnedPlayer(DFCB_PlayerInfo Player, Ship NewShip);

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function changePlayerPoints(DFCB_PlayerInfo player, float delta) {
  DFCB_GameSimulation(getGameSimulation()).changePlayerPoints(player, delta);
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function userLostShip(Ship Other)
{
  local DFCB_PlayerInfo lostPlayer;

  lostPlayer = player_For_Ship(Other);
  if (lostPlayer != None)
    lost_Ship_For_Player(lostPlayer);

  super.userLostShip(Other);
}

simulated function lost_Ship_For_Player(DFCB_PlayerInfo lostPlayer)
{
  lostPlayer.bAlive = false;
  lostPlayer.ship = none;
  lostPlayer.NextSpawnTime = getCurrentTime() + 3;
}

simulated function DFCB_PlayerInfo player_For_Ship(Ship Other);

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function cleanup()
{
  while (spawnOptions.length > 0)
  {
    spawnOptions[0].cleanup();
    spawnOptions.remove(0,1);
  }

  super.cleanup();  
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

defaultproperties
{
}